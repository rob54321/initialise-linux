#! /bin/sh

# this script should be run immediately after the rpi has
# maximised the sdcard space, or on ubuntu after install.
# it installs subversion and sets up rpi/ubuntu to
# 1. boot to console
# 2. set console font and keyboard
# 3. set boot paramters for rpi/ubuntu and fstab
# 4. export sudoers robert
# 5. set aliases and bashrc for root and robert
# 6. install subversion
# 6. setup subversion resporitory
# 7. setup debhome repository with debhomepubkey.asc and debhome.sources
# 8. makes all mount directories and sets ownership
# 9. if the user is pi, setup init service to create user robert after boot
#    by using systemd service
#    this is done so user pi is not active
#    and usermod and groupmod can be run.
#    this script is run by systemd after boot with a parameter
#    to change user pi to robert only if the initial user was pi

usage() {
	echo "-m disk label for debhome				default: ${DEBHOMELABEL}";
	echo "-s disk label for svn      				default: ${SVNLABEL}";
	echo "-S svn destination					default: none";
   	echo "-R reboot                                         default: no reboot";
   	echo "-c changeuser, used automatically if user is pi  default: none";
	echo "-h help"
	exit 0
}
# function to log error, print error and exit
# parameter passed: error string
exitonerror() {
	echo "$1" | tee -a ${LOGFILE}
	exit 1;
}

###############################################################
# function to log output
# first parameter is string to log
# second parameter is used to start
# a new log file
###############################################################
log() {
	test "$2" = "new"  && rm -f ${LOGFILE}
	echo "$1" | tee -a ${LOGFILE}
}

################################
# setup sudoers.d/robert
# and fstab
# setup console boot, hostname timezone,
# console fonts, keyboard, splash screen,
# disable overscan
# no parameters passed
###################################
setuplinux() {
	# install files sudoers
	svn export --force ${SVNURL}/root/my-linux/sudoers.d/robert /etc/sudoers.d
	test $? -eq 0 || exitonerror "could not export sudoers.d from subversion"

	# set ownership
	chown root:root /etc/sudoers.d/robert
	chmod 0440 /etc/sudoers.d/robert

	# setup fstab if it has not been setup already.
	svn export --force ${SVNURL}/root/my-linux/config-files/fstab-extension /etc
	test $? -eq 0 || exitonerror "could not export fstab-extension from subversion"

	# check if fstab-extention has been added to /etc/fstab
	grep -q "fstab-extension" /etc/fstab
	if [ $? -ne 0 ]
	then
		# first backup it up
		cp -a /etc/fstab /etc/fstab.bak

		# append fstab extension to fstab
		cat /etc/fstab-extension >> /etc/fstab
	fi
	rm /etc/fstab-extension

	#############################################
	# setup console boot, hostname timezone,
	# console fonts, keyboard, splash screen,
	# disable overscan
	#############################################
	# set the rpi to boot to console and no autologin
	DEFAULT=`systemctl get-default`
	test "${DEFAULT}" = "multi-user.target" || systemctl set-default multi-user.target

	# setup default console with Terminus
	cd /etc/default
	# make a backup

	test -f /etc/default/console-setup.bak || cp -v /etc/default/console-setup /etc/default/console-setup.bak

	sed -i -e 's/FONTFACE=\".*\"/FONTFACE="Terminus"/' \
	       -e 's/FONTSIZE=\".*\"/FONTSIZE="16x32"/' /etc/default/console-setup

	# setup keyboard
	# make a backup
	test -f /etc/default/keyboard.bak || cp -v /etc/default/keyboard /etc/default/keyboard.bak

	sed -i -e 's/XKBLAYOUT=\".*\"/XKBLAYOUT="za"/' /etc/default/keyboard
	setupcon --save

	# set the time and zone
	timedatectl set-timezone Africa/Johannesburg

	###################################################################
	# for raspberry pi only
	###################################################################
	if test "${ARCH}" = "aarch64"; then
		# remove splash screen and make boot verbose
		sed -i -e 's/quiet splash plymouth.ignore-serial-consoles//' /boot/cmdline.txt

		# disable overscan to remove border in x windows
		sed -i -e 's/^#disable_overscan/disable_overscan/' /boot/config.txt

		# set the raspberry pi to not do auto login
		ln -fs /lib/systemd/system/getty@.service /etc/systemd/system/getty.target.wants/getty@tty1.service
		if test -e /etc/systemd/system/getty@tty1.service.d/autologin.conf; then
			rm /etc/systemd/system/getty@tty1.service.d/autologin.conf
		fi

		# set hostname
		hostnamectl set-hostname rpi
		# change it in /etc/hosts
		sed -i -e 's/raspberrypi/rpi/' /etc/hosts

		# disable wi-fi and bluetooth
		# prevent multiple copies
		sed -i -e '/# disable wifi/,/disable-bt/d' /boot/config.txt
		sed -i -e '/^# Additional overlays/a\# disable wifi\
dtoverlay=disable-wifi\
#disable bluetooth\
dtoverlay=disable-bt' /boot/config.txt

		# setup hdmi 4k
		sed -i -e '/hdmi_enable_4kp60=1/d' /boot/config.txt
		sed -i -e '$a\hdmi_enable_4kp60=1' /boot/config.txt
	#########################################################################
	# for amd64 only
	#########################################################################
	elif test "${ARCH}" = "x86_64"; then
		echo "setting up linux ${ARCH}"

		# disable editfstab.service since it will be enabled
		# after installation of linux on amd64. It is enabled
		# in the live system.
		# note editfstab service will not exist if linux was installed
		# from the iso image. First check if it exists
		systemctl is-enabled editfstab > /dev/null 2>&1
		
		test $? -eq 0 && systemctl disable editfstab

		# export custom.cfg from subversion
		svn export --force file:///mnt/svn/root/my-linux/grub/custom.cfg /boot/grub/

		# set clock to local time
		timedatectl set-local-rtc 1
		hwclock -w

		# edit grub default to enable os prober
		sed -i -e 's/^GRUB_TIMEOUT_STYLE/#GRUB_TIMEOUT_STYLE/' /etc/default/grub
		sed -i -e 's/^GRUB_TIMEOUT.*/GRUB_TIMEOUT=10/' /etc/default/grub
		sed -i -e '/GRUB_DISABLE_OS_PROBER/d' /etc/default/grub
		sed -i -e '$a\GRUB_DISABLE_OS_PROBER="false"' /etc/default/grub
		sed -i -e 's/^GRUB_DEFAULT=.*/GRUB_DEFAULT=\"saved\"/' /etc/default/grub

		# set grub to boot last boot on menu
		sed -i -e '/^GRUB_SAVEDEFAULT=/d' /etc/default/grub
		sed -i -e '$a\GRUB_SAVEDEFAULT="true"' /etc/default/grub

		# edit grub default to remove splash
		sed -i -e 's/GRUB_CMDLINE_LINUX_DEFAULT=.*/GRUB_CMDLINE_LINUX_DEFAULT=\"\"/' /etc/default/grub
		update-grub
	fi
}

#########################################################
# function to setup subversion link and destintation
# the new user must already exist
# the owner.group of the /mnt directory must
# be set to new user
# the SVNLABEL is the disk label of the source for svn
# DESTINATION  is a directory and is optional
# parameters: setupsvn newuser (non root)
#########################################################
setupsvn() {
	# check new user exists
	getent passwd $1 > /dev/null 2>&1
	test $? -eq 0 || exitonerror "new user $1 does not exist"

	# svn is always accessed at file:///mnt/svn
	SVNURL="file://${SVNLINK}"
	# remove any old links
	rm -f "${SVNLINK}"

	# mount svn label if it is not mounted
	mountresource "$1" "${SVNLABEL}" "svn"

	# copy svn to destination if destination was changed
	# do not copy svn to itself
	if test "${SVNDESTCHANGED}" = "true"; then
		# check if destination exists
		if test ! -d "${SVNDESTINATION}"; then
			mkdir -p "${SVNDESTINATION}"
			test $? -eq 0 || exitonerror "could not make ${SVNDESTINATION}"
			chown $1:$1 "${SVNDESTINATION}"
		fi
		# copy files as new user
		sudo -u $1 cp -a "/mnt/${SVNLABEL}/svn" "${SVNDESTINATION}/"
		test $? -eq 0 || exitonerror "could not copy svn to ${SVNDESTINATION}"

		# setup the link, svn was moved
		sudo -u $1 ln -s "${SVNDESTINATION}/svn" "${SVNLINK}"
		test $? -eq 0 || exitonerror "could not make link to ${SVNDESTINATION}/svn"
		log "made ${SVNLINK} -> ${SVNDESTINATION}/svn"
	else
		# svn destination not changed, set the link
		sudo -u $1 ln -s "/mnt/${SVNLABEL}/svn" "${SVNLINK}"
		test $? -eq 0 || exitonerror "could not make link to /mnt/${SVNLABEL}/svn"
		log "made /mnt/svn -> /mnt/${SVNLABEL}/svn"
	fi
}

########################################################
# debhome
# subversion must already be installed
# svn must already be accesible
# the new user must already exist
# mount the debhome device
# setup the link for debhome
# export the pubkey to /etc/apt/keyrings/debhomepubkey.asc
# export debhome.sources to /etc/apt/sources.list.d
# paramters: debhome newuser
#######################################################
debhome() {
	# check new user exists
	getent passwd $1 > /dev/null 2>&1
	test $? -eq 0 || exitonerror "new user $1 does not exist"

	# make the link for debhome
	# debhome is always at /mnt/debhome
	rm -f "${DEBHOMELINK}"

	# mount debhome if it is not mounted
	mountresource "$1" "${DEBHOMELABEL}" "debhome"

	# write debhome.sources to /etc/apt/sources.list.d/debhome.sources

	# make the link for debhome
	sudo -u $1 ln -s "/mnt/${DEBHOMELABEL}/debhome" "${DEBHOMELINK}"

	# get the public key for debhome
	# mkdir /etc/apt/keyrings if it does not exist
	test -d /etc/apt/keyrings || mkdir /etc/apt/keyrings
	# export the public key
	svn export --force ${SVNURL}/root/my-linux/sources/gpg/debhomepubkey.asc /etc/apt/keyrings/
	test $? -eq 0 || exitonerror "could not export debhomepubkey.asc from subverison"

	if test "${ARCH}" = "aarch64"; then
		# export debhome.source for arm64
		svn export --force ${SVNURL}/root/my-linux/sources/arm64/debhome.sources /etc/apt/sources.list.d/
		test $? -eq 0 || exitonerror "could not export debhome.sources from subversion"
	elif test "${ARCH}" = "x86_64"; then
		# export debhome.source for amd64
		svn export --force ${SVNURL}/root/my-linux/sources/amd64/debhome.sources /etc/apt/sources.list.d/
		test $? -eq 0 || exitonerror "could not export debhome.sources from subversion"
	else
		# unknown architecture
		exitonerror "unknown architecture"
	fi
	log "setup debhome"
}

###########################################
# make all the mount directories
# the new user must already exist
# set ownership to newuser of new directories and /mnt
# parameters: makedirs ${NEWUSER}
###########################################
makedirs() {
	chown $1:$1 /mnt
	dirlist="hd2 hd3 ad64 ssd axiz axiz2 king sah trans ver ver8 chaos ad scd1 scd2"
	for dir in $dirlist
	do
		if [ ! -d /mnt/${dir} ]
		then
			mkdir /mnt/${dir}
			test $? -eq 0 || exitonerror "could not make /mnt/${dir}"
		fi
	done

	# change ownership of directories
	chown --no-dereference $1:$1 /mnt/*
	log "made directories"
}

##############################################
# setupsevice is only used if initial user is pi
# the service is enabled so the user is changed
# from pi to robert after reboot.
# this script is called with -c option for change user
# and then exits after setting diretory and link permissions
##############################################
setupservice() {
	# setup init-rpi.service to launch init-rpi on reboot
	# network must be up and running
	echo "[Unit]
	Description=init-rpi.service reboot raspberry pi and change user from pi to robert
	BindsTo=multi-user.target
	After=multi-user.target

	[Service]
	Type=simple
	ExecStart=/bin/bash /usr/local/bin/init-linux -c

	[Install]
	WantedBy=multi-user.target" > /etc/systemd/system/init-rpi.service

	# set mode for init-rpi.service
	chmod 0644 /etc/systemd/system/init-rpi.service

	# enable the service for the next boot
	systemctl enable init-rpi
}
##################################################
# function to check for svn or debhome
# this function will mount the correct disk drive
# the function will exit  on error if not found
# Note: svn and debhome may or may not be on the same disk label
# parameters passed: current non root user, disk_label, root directory of svn | root directory of debhome
##################################################
mountresource () {
	# exit if label not attached
	DEVICE=`blkid -L "$2"`

	if test "$?" -ne 0; then
		exitonerror "$2 is not attached"
	fi

	# make mount directories if they do not exist
	test -d "/mnt/$2" || mkdir "/mnt/$2"
	test $? -eq 0 || exitonerror "could not make /mnt/$2"
	chown $1:$1 "/mnt/$2"

	# if not mounted mount it
	findmnt "/mnt/$2"
	if test $? -ne 0; then
		mount -L "$2" "/mnt/$2"
		test $? -eq 0 || exitonerror "could not mount $2 at /mnt/$2"
		chown $1:$1 "/mnt/$2"
		log "mounted $2 on /mnt/$2"
	else
		# already mounted
		log "/mnt/$2 is already mounted"
	fi

	# check if svn | debhome is accessible
	if test ! -d "/mnt/$2/$3"; then
		# svn or archive does not exist
		umount "/mnt/$2"
		exitonerror "/mnt/$2/$3 not found, unmounting /mnt/$2"
	else
		log "found /mnt/$2/$3"
	fi
	return 0;
}
#############################################
# setup colors for accounts and nano
# parameters: accountcolours current user
# svn must be set up
#############################################
accountcolours() {


	#############################
	# setup /root account for rpi
	#############################
	# root .bashrc edit so directories will be in colour for root and red prompt
	if test ! -f /root/.bashrc.bak; then
		cp -f /root/.bashrc /root/.bashrc.bak
	fi

	# for ubuntu, it is commented out
	sed -i -e 's/^#force_color_prompt=yes/force_color_prompt=yes/' /root/.bashrc

	# prompt for ubuntu and rpi
	if test "${ARCH}" = "x86_64"; then

		# make the prompt
		sed -i -e 's/PS1=.*033\[00m\\\].*/PS1='\''\${debian_chroot:+(\$debian_chroot)}\\[\\033[01;31m\\]\\u@\\h\\[\\033[00m\\]:\\[\\033[01;36m\\]\\w \#\\[\\033[00m\\] '\'''/ /root/.bashrc
	elif test "${ARCH}" = "aarch64"; then

		# make the prompt
		sed -i -e 's/^# PS1=.*/PS1='\''\${debian_chroot:+(\$debian_chroot)}\\[\\033[01;31m\\]\\u@\\h\\[\\033[00m\\]:\\[\\033[01;36m\\]\\w \#\\[\\033[00m\\] '\'''/ /root/.bashrc
	fi

	# setup the aliases for colour
	sed -i -e 's/^# alias l/alias l/' /root/.bashrc

	# setup to use .dircolors
	sed -i -e 's/^# export LS/export LS/' /root/.bashrc
	sed -i -e 's/^# eval.*dircolors.*/eval \"\$(dircolors -b ~\/.dircolors)\"/' /root/.bashrc

	# set up dircolors for root
	dircolors --print-database > /root/.dircolors
	sed -i -e 's/^DIR 01;34/DIR 01;36/' /root/.dircolors
	sed -i -e 's/^LINK 01;36/LINK 01;33/' /root/.dircolors

	#########################
	# setup  non root account for current user
	#########################

	# copy .dircolors to /home/robert and set ownership
	cp /root/.dircolors "/home/$1/"
	chown $1:$1 /home/$1/.dircolors

	# edit .bashrc for pi so directories will be in colour
	if test ! -f /home/$1/.bashrc.bak; then
		sudo -u $1 cp /home/$1/.bashrc /home/$1/.bashrc.bak
	fi
	# change colour of prompt
	sudo -u $1 sed -i -e 's/#force_color_prompt/force_color_prompt/' /home/$1/.bashrc
	sudo -u $1 sed -i -e 's/\[\\033\[01;34m\\\]/\[\\033\[01;36m\\\]/' /home/$1/.bashrc

	# install git credentials
	sudo -u $1 svn export --force ${SVNURL}/root/my-linux/git/.gitconfig /home/$1/
	test $? -eq 0 || exitonerror "could not export .gitconfig"

	sudo -u $1 svn export --force ${SVNURL}/root/my-linux/git/.git-credentials /home/$1/
	test $? -eq 0 || exitonerror "could not export .git-credentials"

	# export .bash_aliases from subversion
	sudo -u $1 svn export --force ${SVNURL}/root/my-linux/config-files/bash_aliases/.bash_aliases /home/$1
	test $? -eq 0 || exitonerror "could not export .bash_aliases"

	# edit subversion config so .git and .gitignore are ignored
	sed -i -e 's/^# global-ignores =/global-ignores = .git .gitignore/' /etc/subversion/config

	# edit nanorc
	sed -i -e 's/^# set autoindent/set autoindent/' \
	       -e 's/^# set linenumbers/set linenumbers/' \
	       -e 's/^# set smooth/set smooth/' \
	       -e 's/^# set multibuffer/set multibuffer/' \
	       -e 's/^# set positionlog/set positionlog/' \
	       -e 's/^# set selectedcolor lightwhite,magenta/set selectedcolor lightwhite,magenta/' \
	       -e 's/^# set numbercolor cyan/set numbercolor cyan/' \
	       -e 's/^# set keycolor cyan/set keycolor cyan/' /etc/nanorc
	log "setup account colours"
}
################################################
# disable the init-rpi.service if it is enabled
# invoked by changeuser
################################################
disableinitrpi() {
	if test -f /etc/systemd/system/init-rpi.service; then
		systemctl is-enabled init-rpi.service
		if test $? -eq 0; then
			# disable the init-rpi.service
			systemctl disable init-rpi.service
			log "disabled init-rpi.service"
		fi
	fi
}

###########################################
# invoked by changeuser function.
# set ownership of /mnt/ dirs to robert.robert
# after pi changed to robert
# parameter passed is user robert
###########################################
setowner() {
	chown -R --no-dereference $1:$1 /mnt
	# change ownership of directories

	log "set ownership of directories"
}

##############################################################
# this function is only run after a reboot by systemd
# to make sure no pi processes are running.
# this function will exit if pi processes are running
# change user pi to robert with correct groups and permissions
# check if user robert exists
# parameters: changeuser OLDUSER NEWUSER
# ie changeuser pi robert
##############################################################
changeuser() {
	# disable init-rpi.service
	disableinitrpi

	# check if any process of pi is still running
	ps -U "$1" > /dev/null 2>&1
	test $? -eq 0 && exitonerror "a process from user $1 is still running"

	getent passwd $2 > /dev/null 2>&1
	if test $? -ne 0; then
		# user robert does not exist, create it
		# since svn might be copied to newuser home
		# the olduser dir must be copied to the newuser directory
		# usermod refuses to move if newuser home exists
		usermod -l $2 -m -d /home/$2 $1

		# if group pi exists, change it to group robert
		getent group $1
		if test $? -eq 0; then
			# change the group pi to robert
			groupmod -n $2 $1
		fi
		# set permissions of new user home
		# and of the mount directories and links
		chown $2:$2 -R /home/$2
		setowner "$2"

		log "$1 user changed to user $2"
	else
		log "user $2 already exists"
	fi

	# nothing more to be done.
	# this function was invoked after a reboot
	# initial user pi was changed to robert.
	# so exit
	log "success, exiting"
	exit 0
}

# defaults, links
# /mnt/debhome    -> /mnt/DEBHOMELABEL/debhome
# /mnt/svn        -> /mnt/SVNLABEL/svn
# the links cannot be changed, the mountpoints can be changed
# DEBHOMELABEL, SVNLABEL
# are the labels of the disks containing debhome, svn and
# are all mounted at /mnt/LABEL

# only for raspberry pi
DEBHOMELABEL="ad64"
DEBHOMELINK="/mnt/debhome"
SVNLABEL="ad64"
SVNLINK="/mnt/svn"
SVNURL="file:///mnt/svn"
SVNDESTCHANGED="false"
OLDUSER="pi"
NEWUSER="robert"
LOGFILE="/tmp/init-linux.log"
# the current non root user, either robert or pi
CURUSER="none"
ARCH=`arch`

################################
# main entry
################################
log "init-linux is running for ${ARCH}" "new"

# parameter S destinstion of svn is
# only used in init-rpi, not in this script
# svndestination is only used by init-rpi
# it must be defined here as it is passed to init-rpi
# option c is only used automatically by this script
# if the initial user is pi
while getopts RS:m:s:r:ch opt
do
	case ${opt} in
		m) DEBHOMELABEL="${OPTARG}";;
		s) SVNLABEL="${OPTARG}";;
		S) SVNDESTINATION="${OPTARG}"; SVNDESTCHANGED="true";;
		R) REBOOT="true";;
		c) changeuser "${OLDUSER}" "${NEWUSER}";;
		h) usage;;
		\?) usage;;
	esac
done

#####################################
# init-linux must to be copied to /usr/local/bin
#####################################
# copy this script to /usr/local/bin
# incase init-rpi.service needs to run it
# only copy if not run from /usr/local/bin
if test "$0" != "/usr/local/bin/init-linux"; then
	cp -vf $0 /usr/local/bin/
fi

######################################
# install subversion if it is not installed
# this used to be in init-rpi
# solves a lot of problems installing it first
######################################
dpkg-query -W subversion > /dev/null 2>&1
if test $? -ne 0; then
	apt update
	test $? -eq 0 || exitonerror "error from apt update"

	apt -y install subversion
	test $? -eq 0 || exitonerror "error installing subversion"
fi

#########################################
# determine if user robert or pi exists.
#########################################
getent passwd robert > /dev/null 2>&1
if test $? -eq 0; then
	# non root user = robert
	CURUSER="robert"
else
	# check for pi
	getent passwd pi > /dev/null 2>&1
	if test $? -eq 0; then
		# non root user = pi
		CURUSER="pi"

		# user can be changed only after reboot
		# setup service for reboot
		setupservice
	else
		# non root user is unknown
		exitonerror "user robert or pi does not exist"
	fi
fi

########################################
# make directories and set ownership
########################################
makedirs "${CURUSER}"

#######################################
# setup svn and set link
#######################################
setupsvn "${CURUSER}"

################################
# set up debhome and set link
###############################
debhome "${CURUSER}"

# setup up account colours
# subversion repository must be accessible
accountcolours "${CURUSER}"

####################################
# setup linux sudoers, console, host
# config boot parameters, keyboard,
# autologin, multi-user
####################################
setuplinux

log "success"

############################################
# reboot only if option set and
# user is pi. init-rpi will change pi to robert
############################################
if test "${REBOOT}" = "true" && test "${CURUSER}" = "${OLDUSER}"; then
	shutdown -r now
elif test "${CURUSER}" = "${OLDUSER}"; then
	echo "reboot to change user"
fi
