#! /bin/sh

# this script should be run immediately after the rpi has
# maximised the sdcard space, ie after the first boot.
# it installs subversion and sets up rpi to boot to console and then runs init-rpi
# through systemd service. init-rpi only runs once and does
# the rest of the setup.

# this is done so user pi is not active
# and usermod and groupmod can be run.

usage() {
	echo "-m disk label for debhome				default: ${DEBHOMELABEL}";
	echo "-s disk label for svn      				default: ${SVNLABEL}";
	echo "-S svn destination					default: none";
   	echo "-R reboot                                         default: no reboot";
	echo "-h help"
	exit 0
}
# function to log error, print error and exit
# parameter passed: error string
exitonerror() {
	echo "$1" | tee -a ${LOGFILE}
	exit 1;
}

###############################################
# function to determine if user is robert or pi
# the user is returned
# no parameters are passed to this function
###############################################
getcuruser() {
	# determine if user is robert or pi
	groups robert > /dev/null 2>&1
	if test $? -eq 0; then
		CURUSER="robert"
	else
		groups pi > /dev/null 2>&1
		if test $? -eq 0; then
			CURUSER="pi"
		else
			exitonerror "user robert or pi not found"
		fi
	fi
}
#########################################################
# subversion
# setup subversion link and destintation
# parameters: setupsvn current_user (non root)
#########################################################
setupsvn() {
	# svn is always accessed at file:///mnt/svn
	SVNURL="file://${SVNLINK}"
	# remove any old links
	rm -f "${SVNLINK}"

	# mount disk label for svn
	# mountresource will exit if svn is not available
	mountresource "${SVNLABEL}" "svn"

	# svn disk mounted and it exists
	# copy svn to destination if destination given
	# do not copy svn to itself
	if test "${SVNDESTINATION}" != "/mnt/${SVNLABEL}"; then
		# check if destination exists
		if test ! -d "${SVNDESTINATION}"; then
			mkdir -p "${SVNDESTINATION}"
			chown $1.$1 "${SVNDESTINATION}"
		fi
		cp -a "/mnt/${SVNLABEL}/svn" "${SVNDESTINATION}/"
		# setup the link, svn was moved
		sudo -u $1 ln -s "${SVNDESTINATION}/svn" "${SVNLINK}"
	else
		# svn destination not changed, set the link
		sudo -u $1 ln -s "/mnt/${SVNLABEL}/svn" "${SVNLINK}"
	fi
}

########################################################
# debhome
# setup the link for debhome
# subversion must already be installed
# export the pubkey to /etc/apt/keyrings/debhomepubkey.asc
# export debhome.sources to /etc/apt/sources.list.d
# paramters: debhome newuser
#######################################################
debhome() {
	# make the link for debhome
	# debhome is always at /mnt/debhome
	rm -f "${DEBHOMELINK}"

	# mount disk label for debhome
	# mountresource will exist if debhome is not available
	mountresource "${DEBHOMELABEL}" "debhome"

	# write debhome.sources to /etc/apt/sources.list.d/debhome.sources

	# make the link for debhome
	sudo -u $1 ln -s "/mnt/${DEBHOMELABEL}/debhome" "${DEBHOMELINK}"

	# get the public key for debhome
	# mkdir /etc/apt/keyrings if it does not exist
	test -d /etc/apt/keyrings || mkdir /etc/apt/keyrings
	# export the public key
	svn export --force ${SVNURL}/root/my-linux/sources/gpg/debhomepubkey.asc /etc/apt/keyrings/
	test $? -eq 0 || exitonerror "could not export debhomepubkey.asc from subverison"

	# export debhome
	svn export --force ${SVNURL}/root/my-linux/sources/arm64/debhome.sources /etc/apt/sources.list.d/
	test $? -eq 0 || exitonerror "could not export debhome.sources from subversion"

	echo "setup debhome" >> ${LOGFILE}
}


# function to check for svn or debhome
# this function will mount the correct disk drive
# if they are on a  disk drive LABEL.
# the function will exit  on error if not found
# parameters passed: disk_label, root directory of svn | root directory of debhome

mountresource () {
	# check if the disk label is attached
	DEVICE=`blkid -L "$1"`

	if test "$?" -ne 0; then
		exitonerror "$1 is not attached"
	else
		# check if device is mounted and where
		grep "${DEVICE}" /etc/mtab
		if test $? -eq 0; then
			MOUNTPT=`grep "${DEVICE}" /etc/mtab | cut -d " " -f2`
			# disk is  mounted at MOUNTPT
			# unmount if MOUNTPT is not /mnt/disk_label
			if test "${MOUNTPT}" != "/mnt/$1"; then
				echo "unmounting ${MOUNTPT}"
				umount "${MOUNTPT}"
			fi
		fi
	fi

	# make the mount directory if it does not exist
	# make the directory and set the ownership
	test -d "/mnt/$1" || mkdir "/mnt/$1"
	chown ${CURUSER}.${CURUSER} "/mnt/$1"

	#  if disk not mounted, mount it
	findmnt "/mnt/$1"
	if test "$?" -ne 0; then
		# mount it
		mount -L "$1" "/mnt/$1"
		# set mounted flag
		test $? -eq 0 || exitonerror "could not mount $"
	fi

	# check if svn | debhome is accessible
	if test ! -d "/mnt/$1/$2"; then
		# svn or archive does not exist
		echo "/mnt/$1/$2 not found"
		echo "unmounting /mnt/$1"
		umount "/mnt/$1"
		exitonerror "/mnt/$1/$2 not found"
	fi
	return 0;
}

# defaults, links
# /mnt/debhome    -> /mnt/DEBHOMELABEL/debhome
# /mnt/svn        -> /mnt/SVNLABEL/svn
# the links cannot be changed, the mountpoints can be changed
# DEBHOMELABEL, SVNLABEL
# are the labels of the disks containing debhome, svn and
# are all mounted at /mnt/LABEL

# only for raspberry pi
DEBHOMELABEL="ad64"
DEBHOMELINK="/mnt/debhome"
SVNLABEL="ad64"
SVNLINK="/mnt/svn"
REBOOT="false"
LOGFILE="/tmp/init-rpi-first.log"

# rm log file
rm -f ${LOGFILE}

# parameter S destinstion of svn is
# only used in init-rpi, not in this script
while getopts RS:m:s:r:h opt
do
	case ${opt} in
		m) DEBHOMELABEL="${OPTARG}";;
		s) SVNLABEL="${OPTARG}";;
		S) SVNDESTINATION="${OPTARG}"; SVNDESTCHANGED="true";;
		R) REBOOT="true";;
		h) usage;;
		\?) usage;;
	esac
done
#################################
# get current user, robert or pi
getcuruser

#####################################
# init-rpi must to be copied to /usr/local/bin
# find init-rpi
# look in current dir, usr/local/bin, prompt
# exit if init-rpi not found
#####################################
if test -f "/usr/local/bin/init-rpi"; then
	# found init-rpi
	echo "found /usr/local/bin/init-rpi"
elif test -f "init-rpi"; then
	# look in current directory
	echo "found init-rpi"
	cp -v init-rpi /usr/local/bin/

else
	# prompt for init-rpi
	echo "Enter the path of init-rpi"
	read INITP
	if test -f "${INITP}/init-rpi"; then
		if test "/usr/local/bin" != "${INITP}"; then
			cp -v "${INITP}/init-rpi" "/usr/local/bin/"
		fi
	else
		# file not found
		exitonerror "${INITP}/init-rpi not found"
	fi
fi


######################################
# install subversion if it is not installed
# this used to be in init-rpi
# solves a lot of problems installing it first
######################################
dpkg-query -W subversion > /dev/null 2>&1
if test $? -ne 0; then
	apt update
	test $? -eq 0 || exitonerror "error from apt update"

	apt -y install subversion
	test $? -eq 0 || exitonerror "error installing subversion"
fi

# if SVNDESTINATION has not changed
# then SVNDESTINATION = /mnt/${SVNLABEL}
# because SVNLABEL may have changed
if test "${SVNDESTCHANGED}" = "false"; then
	SVNDESTINATION="/mnt/${SVNLABEL}"
	echo "svn destination not changed" >> ${LOGFILE}
fi

# check if subversion exists and set it up
setupsvn "${CURUSER}"


################################
# check debhome repository exists
###############################
debhome "${CURUSER}"

################################
# setup sudoers.d/robert
# and fstab
###################################
# install files sudoers
svn export --force ${SVNURL}/root/my-linux/sudoers.d/robert /etc/sudoers.d
test $? -eq 0 || exitonerror "could not export sudoers.d from subversion"

# set ownership
chown root.root /etc/sudoers.d/robert
chmod 0440 /etc/sudoers.d/robert

# setup fstab if it has not been setup already.
svn export --force ${SVNURL}/root/my-linux/config-files/fstab-extension /etc
test $? -eq 0 || exitonerror "could not export fstab-extension from subversion"

# check if fstab-extention has been added to /etc/fstab
grep -q "fstab-extension" /etc/fstab
if [ $? -ne 0 ]
then
	# first backup it up
	cp -a /etc/fstab /etc/fstab.bak

	# append fstab extension to fstab
	cat /etc/fstab-extension >> /etc/fstab
fi
rm /etc/fstab-extension

#############################################
# setup console boot, hostname timezone,
# console fonts, keyboard, splash screen,
# disable overscan
#############################################
# set the rpi to boot to console and no autologin
systemctl set-default multi-user.target
ln -fs /lib/systemd/system/getty@.service /etc/systemd/system/getty.target.wants/getty@tty1.service
if test -e /etc/systemd/system/getty@tty1.service.d/autologin.conf; then
	rm /etc/systemd/system/getty@tty1.service.d/autologin.conf
fi

# set the time and zone
timedatectl set-timezone Africa/Johannesburg

# set hostname
hostnamectl set-hostname rpi
# change it in /etc/hosts
sed -i -e 's/raspberrypi/rpi/' /etc/hosts

# setup default console with Terminus
cd /etc/default
sed -i -e 's/FONTFACE=\".*\"/FONTFACE="Terminus"/' \
       -e 's/FONTSIZE=\".*\"/FONTSIZE="16x32"/' /etc/default/console-setup

# setup keyboard
sed -i -e 's/XKBLAYOUT=\".*\"/XKBLAYOUT="za"/' /etc/default/keyboard
setupcon

# remove splash screen and make boot verbose
sed -i -e 's/quiet splash plymouth.ignore-serial-consoles//' /boot/cmdline.txt

# disable overscan to remove border in x windows
sed -i -e 's/^#disable_overscan/disable_overscan/' /boot/config.txt

#####################################
# launch service init-rpi if necessary
# create the init-rpi service
# the -R option may be passed to init-rpi
# but it has no effect. init-rpi must
# recognise it but not use it.
###################################
# only use init-rpi.service if user robert
# does not exist
if test ${CURUSER} != "robert"; then
echo "[Unit]
Description=init-rpi.service reboot raspberry pi and then initialise rpi once.
BindsTo=multi-user.target
After=multi-user.target

[Service]
Type=simple
ExecStart=/bin/bash /usr/local/bin/init-rpi

[Install]
WantedBy=multi-user.target" > /etc/systemd/system/init-rpi.service

# set mode for init-rpi.service
chmod 0644 /etc/systemd/system/init-rpi.service

# enable the service for the next boot
systemctl enable init-rpi
fi
############################################
# reboot if it is necessary
# only necessary if pi was changed to robert
############################################
if test "${REBOOT}" = "true" && ${CURUSER} = "pi"; then
	shutdown -r now
else
	# excute init-rpi
	/usr/local/bin/init-rpi
fi
