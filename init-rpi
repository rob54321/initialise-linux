#!/bin/bash

# Script to initialise raspberry pi
# this script is run by init-rpi-first or init-rpi.service
# depending on if the original user was pi or robert
# the raspberry pi will have booted into multi.user mode
# ie console mode, not into x windows.
# subversion was installed by init-rpi-first

# multi-user.target is set so that user pi can be changed to robert
# the clock and time zone are also set prior to this script
#
# the subversion repository must exist.
# this script initialises the repositories for apt-get, makes all directories, sets links svn and debhome
# user robert exists only at this stage hence directories persmisions can only be set here

usage() {
	echo "-m disk label for debhome				default: ${DEBHOMELABEL}";
	echo "-s disk label for svn      				default: ${SVNLABEL}";
	echo "-S svn destination					default: none";
   	echo "-R reboot                                         default: no reboot";
	echo "-h help"
	exit 0
}
###############################################################
# function to log output
# first parameter is string to log
# second parameter is used to start
# a new log file
###############################################################
log() {
	test "$2" = "new"  && rm -f ${LOGFILE}
	echo "$1" | tee -a ${LOGFILE}
}

###############################################################
# this function prints an error mesage and exists.
# parameters passed , error message
###############################################################
exitonerror() {
	echo "$1" | tee -a ${LOGFILE}
	exit 1
}

#########################################################
# function to setup subversion link and destintation
# the new user must already exist
# the owner.group of the /mnt directory must
# be set to new user
# the SVNLABEL is the disk label of the source for svn
# DESTINATION  is a directory and is optional
# parameters: setupsvn newuser (non root)
#########################################################
setupsvn() {
	# check new user exists
	getent passwd $1 > /dev/null 2>&1
	test $? -eq 0 || exitonerror "new user $1 does not exist"

	# svn is always accessed at file:///mnt/svn
	SVNURL="file://${SVNLINK}"
	# remove any old links
	rm -f "${SVNLINK}"

	# mount svn label if it is not mounted
	mountresource "$1" "${SVNLABEL}" "svn"

	# copy svn to destination if destination was changed
	# do not copy svn to itself
	if test "${SVNDESTCHANGED}" = "true"; then
		# check if destination exists
		if test ! -d "${SVNDESTINATION}"; then
			mkdir -p "${SVNDESTINATION}"
			test $? -eq 0 || exitonerror "could not make ${SVNDESTINATION}"
			chown $1.$1 "${SVNDESTINATION}"
		fi
		# copy files as new user
		sudo -u $1 cp -a "/mnt/${SVNLABEL}/svn" "${SVNDESTINATION}/"
		test $? -eq 0 || exitonerror "could not copy svn to ${SVNDESTINATION}"

		# setup the link, svn was moved
		sudo -u $1 ln -s "${SVNDESTINATION}/svn" "${SVNLINK}"
		test $? -eq 0 || exitonerror "could not make link to ${SVNDESTINATION}/svn"
		log "made ${SVNLINK} -> ${SVNDESTINATION}/svn"
	else
		# svn destination not changed, set the link
		sudo -u $1 ln -s "/mnt/${SVNLABEL}/svn" "${SVNLINK}"
		test $? -eq 0 || exitonerror "could not make link to /mnt/${SVNLABEL}/svn"
		log "made /mnt/svn -> /mnt/${SVNLABEL}/svn"
	fi
}

########################################################
# debhome
# subversion must already be installed
# svn must already be accesible
# the new user must already exist
# mount the debhome device
# setup the link for debhome
# export the pubkey to /etc/apt/keyrings/debhomepubkey.asc
# export debhome.sources to /etc/apt/sources.list.d
# paramters: debhome newuser
#######################################################
debhome() {
	# check new user exists
	getent passwd $1 > /dev/null 2>&1
	test $? -eq 0 || exitonerror "new user $1 does not exist"

	# make the link for debhome
	# debhome is always at /mnt/debhome
	rm -f "${DEBHOMELINK}"

	# mount debhome if it is not mounted
	mountresource "$1" "${DEBHOMELABEL}" "debhome"

	# write debhome.sources to /etc/apt/sources.list.d/debhome.sources

	# make the link for debhome
	sudo -u $1 ln -s "/mnt/${DEBHOMELABEL}/debhome" "${DEBHOMELINK}"

	# get the public key for debhome
	# mkdir /etc/apt/keyrings if it does not exist
	test -d /etc/apt/keyrings || mkdir /etc/apt/keyrings
	# export the public key
	svn export --force ${SVNURL}/root/my-linux/sources/gpg/debhomepubkey.asc /etc/apt/keyrings/
	test $? -eq 0 || exitonerror "could not export debhomepubkey.asc from subverison"

	# export debhome
	svn export --force ${SVNURL}/root/my-linux/sources/arm64/debhome.sources /etc/apt/sources.list.d/
	test $? -eq 0 || exitonerror "could not export debhome.sources from subversion"

	log "setup debhome"
}


# change user pi to robert with correct groups and permissions
# check if user robert exists
# parameters: changeuser OLDUSER NEWUSER
# ie changeuser pi robert
changeuser() {
	# check if any process of pi is still running
	ps -U "$1" > /dev/null 2>&1
	test $? -eq 0 && exitonerror "a process from user $1 is still running"

	groups $2 > /dev/null 2>&1
	if test $? -ne 0; then
		# user robert does not exist, create it
		# since svn might be copied to newuser home
		# the olduser dir must be copied to the newuser directory
		# usermod refuses to move if newuser home exists
		usermod -l $2 -m -d /home/$2 $1

		# if group pi exists, change it to group robert
		getent group $1
		if test $? -eq 0; then
			# change the group pi to robert
			groupmod -n $2 $1
		fi
		# set permissions of new user home
		chown $2.$2 -R /home/$2

		log "$1 user changed to user $2"
	else
		log "user $2 already exists"
	fi
}

# make all the mount directories
# the new user must already exist
# set ownership to newuser of new directories and /mnt
# parameters: makedirs ${NEWUSER}

makedirs() {
	chown $1.$1 /mnt
	dirlist="hd2 hd3 ad64 ssd axiz axiz2 king sah trans ver ver8 chaos ad scd1 scd2"
	for dir in $dirlist
	do
		if [ ! -d /mnt/${dir} ]
		then
			mkdir /mnt/${dir}
			test $? -eq 0 || exitonerror "could not make /mnt/${dir}"
		fi
	done

	# change ownership of directories
	chown --no-dereference $1.$1 /mnt/*
	log "made directories"
}

##################################################
# function to check for svn or debhome
# this function will mount the correct disk drive
# the function will exit  on error if not found
# Note: svn and debhome may or may not be on the same disk label
# parameters passed: newuser, disk_label, root directory of svn | root directory of debhome
##################################################
mountresource () {
	# exit if label not attached
	DEVICE=`blkid -L "$2"`

	if test "$?" -ne 0; then
		exitonerror "$2 is not attached"
	fi

	# make mount directories if they do not exist
	test -d "/mnt/$2" || mkdir "/mnt/$2"
	test $? -eq 0 || exitonerror "could not make /mnt/$2"
	chown $1.$1 "/mnt/$2"

	# if not mounted mount it
	findmnt "/mnt/$2"
	if test $? -ne 0; then
		mount -L "$2" "/mnt/$2"
		test $? -eq 0 || exitonerror "could not mount $2 at /mnt/$2"
		chown $1.$1 "/mnt/$2"
		log "mounted $2 on /mnt/$2"
	else
		# already mounted
		log "/mnt/$2 is already mounted"
	fi

	# check if svn | debhome is accessible
	if test ! -d "/mnt/$2/$3"; then
		# svn or archive does not exist
		umount "/mnt/$2"
		exitonerror "/mnt/$2/$3 not found, unmounting /mnt/$2"
	else
		log "found /mnt/$2/$3"
	fi
	return 0;
}
#############################################
# setup colors for accounts and nano
# parameters: accountcolours newuser
#############################################
accountcolours() {
	#############################
	# setup /root account
	#############################
	# root .bashrc edit so directories will be in colour for root and red prompt
	if test ! -f /root/.bashrc.bak; then
		cp -f /root/.bashrc /root/.bashrc.bak
	fi
	# make the prompt
	sed -i -e '/^# PS1/i \PS1='\''\${debian_chroot:+(\$debian_chroot)}\\[\\033[01;31m\\]\\u@\\h\\[\\033[00m\\]:\\[\\033[01;36m\\]\\w \#\\[\\033[00m\\] '\''' /root/.bashrc
	# setup the aliases for colour
	sed -i -e 's/^# alias l/alias l/' /root/.bashrc

	# setup to use .dircolors
	sed -i -e 's/^# export LS/export LS/' /root/.bashrc
	sed -i -e 's/^# eval \"`dircolors`\"/eval \"\$(dircolors -b ~\/.dircolors)\"/' /root/.bashrc

	# set up dircolors for root
	dircolors --print-database > /root/.dircolors
	sed -i -e 's/^DIR 01;34/DIR 01;36/' /root/.dircolors
	sed -i -e 's/^LINK 01;36/LINK 01;33/' /root/.dircolors

	#########################
	# setup  /home/robert account
	#########################
	# check user robert exists
	groups robert > /dev/null 2>&1
	test $? -eq 0 || exitonerror "user robert does not exist"

	# copy .dircolors to /home/robert and set ownership
	cp /root/.dircolors "/home/$1/"
	chown $1.$1 /home/$1/.dircolors

	# edit .bashrc for pi so directories will be in colour
	if test ! -f /home/$1/.bashrc.bak; then
		sudo -u $1 cp /home/$1/.bashrc /home/$1/.bashrc.bak
	fi
	# change colour of prompt
	sudo -u robert sed -i -e 's/#force_color_prompt/force_color_prompt/' /home/$1/.bashrc
	sudo -u $1 sed -i -e 's/\[\\033\[01;34m\\\]/\[\\033\[01;36m\\\]/' /home/$1/.bashrc

	# install git credentials
	sudo -u $1 svn export --force ${SVNURL}/root/my-linux/git/.gitconfig /home/$1/
	test $? -eq 0 || exitonerror "could not export .gitconfig"

	sudo -u $1 svn export --force ${SVNURL}/root/my-linux/git/.git-credentials /home/$1/
	test $? -eq 0 || exitonerror "could not export .git-credentials"

	# export .bash_aliases from subversion
	sudo -u $1 svn export --force ${SVNURL}/root/my-linux/config-files/bash_aliases/.bash_aliases /home/$1
	test $? -eq 0 || exitonerror "could not export .bash_aliases"

	# edit subversion config so .git and .gitignore are ignored
	sed -i -e 's/^# global-ignores =/global-ignores = .git .gitignore/' /etc/subversion/config

	# edit nanorc
	sed -i -e 's/^# set autoindent/set autoindent/' \
	       -e 's/^# set linenumbers/set linenumbers/' \
	       -e 's/^# set smooth/set smooth/' \
	       -e 's/^# set multibuffer/set multibuffer/' \
	       -e 's/^# set positionlog/set positionlog/' \
	       -e 's/^# set selectedcolor lightwhite,magenta/set selectedcolor lightwhite,magenta/' \
	       -e 's/^# set numbercolor cyan/set numbercolor cyan/' \
	       -e 's/^# set keycolor cyan/set keycolor cyan/' /etc/nanorc
	log "setup account colours"
}

# only for raspberry pi
DEBHOMELABEL="ad64"
DEBHOMELINK="/mnt/debhome"
SVNLABEL="ad64"
SVNLINK="/mnt/svn"
OLDUSER="pi"
NEWUSER="robert"
LOGFILE="/tmp/init-rpi.log"
SVNURL="file:///mnt/svn"
SVNDESTCHANGED="false"

################################
# main entry
################################
log "init-rpi is running" "new"

# parameter S destinstion of svn is
# only used in init-rpi, not in this script
while getopts RS:m:s:r:h opt
do
	case ${opt} in
		m) DEBHOMELABEL="${OPTARG}";;
		s) SVNLABEL="${OPTARG}";;
		S) SVNDESTINATION="${OPTARG}"; SVNDESTCHANGED="true";;
		R) REBOOT="true";;
		h) usage;;
		\?) usage;;
	esac
done

# exit if subverion is not installed
dpkg-query -W subversion > /dev/null 2>&1
test $? -eq 0 || exitonerror "subversion is not installed"

# change user from pi to robert
changeuser "${OLDUSER}" "${NEWUSER}"

# disable the init-rpi.service if it is enabled
if test -f /etc/systemd/system/init-rpi.service; then
	systemctl is-enabled init-rpi.service
	if test $? -eq 0; then
		# disable the init-rpi.service
		systemctl disable init-rpi.service
		log "disabled init-rpi.service"
	fi
fi
# make all mount directories
# and set ownership to newuser
# must be done before setupsvn, debhome
makedirs "${NEWUSER}"

# mount svn and make link
# cp svn if destination was changed
setupsvn "${NEWUSER}"

# mount debhome and make link
debhome "${NEWUSER}"

# setup up account colours
# subversion repository must be accessible
accountcolours "${NEWUSER}"

# setup console
setupcon

################################
# setup sudoers.d/robert
# and fstab
###################################
# install files sudoers
svn export --force ${SVNURL}/root/my-linux/sudoers.d/robert /etc/sudoers.d
test $? -eq 0 || exitonerror "could not export sudoers.d from subversion"

# set ownership
chown root.root /etc/sudoers.d/robert
chmod 0440 /etc/sudoers.d/robert

# setup fstab if it has not been setup already.
svn export --force ${SVNURL}/root/my-linux/config-files/fstab-extension /etc
test $? -eq 0 || exitonerror "could not export fstab-extension from subversion"

# check if fstab-extention has been added to /etc/fstab
grep -q "fstab-extension" /etc/fstab
if [ $? -ne 0 ]
then
	# first backup it up
	cp -a /etc/fstab /etc/fstab.bak

	# append fstab extension to fstab
	cat /etc/fstab-extension >> /etc/fstab
fi
rm /etc/fstab-extension
