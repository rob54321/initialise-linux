#!/bin/sh

###########################################################
# note: -m and -s options do not work for a live system
# TBD.
###########################################################
# this script should be run immediately after the rpi has
# maximised the sdcard space, or on ubuntu after install or on live install
# it installs subversion and sets up rpi/ubuntu to
# 1. boot to console
# 2. set console font and keyboard
# 3. set boot paramters for rpi/ubuntu and fstab
# 4. export sudoers robert
# 5. set aliases and bashrc for root and robert
# 6. install subversion
# 6. setup subversion resporitory
# 7. setup debhome repository with debhomepubkey.asc and debhome.sources
# 8. makes all mount directories and sets ownership
# 9. if the user is pi, setup init service to create user robert after boot
#    by using systemd service
#    this is done so user pi is not active
#    and usermod and groupmod can be run.
#    this script is run by systemd after boot with a parameter
#    to change user pi to robert only if the initial user was pi

usage() {
	echo "-d disk label for debhome				default: ${DEBHOMEPATH}";
	echo "-s full path to svn      				default: ${SVNPATH}";
   	echo "-R reboot                                         default: no reboot";
   	echo "-c changeuser, used automatically if user is pi  default: none";
	echo "-h help"
	exit 0
}

# function to exit with status 1
# the debhomedev is unmounted first
# the rc code is passed as first parameter, no exit on 0, exit on 1, 2, 3..
# second parameter is the error string
exitonerror() {
	# test rc code
	if test $1 -ne 0; then
		# display error string
		echo "$2"
		exit 1;
	fi
}

###############################################################
# function to log output
# first parameter is string to log
# second parameter is used to start
# a new log file
###############################################################
log() {
	test "$2" = "new"  && rm -f ${LOGFILE}
	echo "$1" | tee -a ${LOGFILE}
}

################################
# setup sudoers.d/robert
# and fstab
# setup console boot, hostname timezone,
# console fonts, keyboard, splash screen,
# disable overscan
# no parameters passed
###################################
setuplinux() {
	# install files sudoers
	svn export --force ${SVNURL}/root/my-linux/sudoers.d/robert /etc/sudoers.d
	exitonerror $? "could not export sudoers.d from subversion"

	# set ownership
	chown root:root /etc/sudoers.d/robert
	chmod 0440 /etc/sudoers.d/robert

	# edit fstab
	/usr/local/bin/editfstab -e

	#############################################
	# setup console boot, hostname timezone,
	# console fonts, keyboard, splash screen,
	# disable overscan
	#############################################
	# set the rpi to boot to console and no autologin
	DEFAULT=`systemctl get-default`
	test "${DEFAULT}" = "multi-user.target" || systemctl set-default multi-user.target

	# setup default console with Terminus
	cd /etc/default
	# make a backup

	test -f /etc/default/console-setup.bak || cp -v /etc/default/console-setup /etc/default/console-setup.bak

	sed -i -e 's/FONTFACE=\".*\"/FONTFACE="Terminus"/' \
	       -e 's/FONTSIZE=\".*\"/FONTSIZE="16x32"/' /etc/default/console-setup

	# setup keyboard
	# make a backup
	test -f /etc/default/keyboard.bak || cp -v /etc/default/keyboard /etc/default/keyboard.bak

	sed -i -e 's/XKBLAYOUT=\".*\"/XKBLAYOUT="za"/' /etc/default/keyboard
	setupcon --save

	# set the time and zone
	timedatectl set-timezone Africa/Johannesburg

	###################################################################
	# for raspberry pi only
	###################################################################
	if test "${ARCH}" = "aarch64"; then
		# remove splash screen and make boot verbose and make the console cursor a block
		sed -i -e 's/quiet splash plymouth.ignore-serial-consoles/vt.cur_default=8/' /boot/cmdline.txt

		# disable overscan to remove border in x windows
		sed -i -e 's/^#disable_overscan/disable_overscan/' /boot/config.txt

		# set the raspberry pi to not do auto login
		ln -fs /lib/systemd/system/getty@.service /etc/systemd/system/getty.target.wants/getty@tty1.service
		if test -e /etc/systemd/system/getty@tty1.service.d/autologin.conf; then
			rm /etc/systemd/system/getty@tty1.service.d/autologin.conf
		fi

		# set hostname
		hostnamectl set-hostname rpi
		# change it in /etc/hosts
		sed -i -e 's/raspberrypi/rpi/' /etc/hosts

		# disable wi-fi and bluetooth
		# prevent multiple copies
		sed -i -e '/# disable wifi/,/disable-bt/d' /boot/config.txt
		sed -i -e '/^# Additional overlays/a\# disable wifi\
dtoverlay=disable-wifi\
#disable bluetooth\
dtoverlay=disable-bt' /boot/config.txt

		# setup hdmi 4k
		sed -i -e '/hdmi_enable_4kp60=1/d' /boot/config.txt
		sed -i -e '$a\hdmi_enable_4kp60=1' /boot/config.txt
	#########################################################################
	# for amd64 only
	#########################################################################
	elif test "${ARCH}" = "x86_64"; then
		echo "setting up linux ${ARCH}"

		# disable editfstab.service since it will be enabled
		# after installation of linux on amd64. It is enabled
		# in the live system.
		# note editfstab service will not exist if linux was installed
		# from the iso image. First check if it exists
		# set clock to local time
		timedatectl --adjust-system-clock set-local-rtc 1
		hwclock -w

		# for live system only
		if test `hostname` = "live"; then
			# for the live system
			# this is the Ubuntu live system
			usermod -u 1000 robert
			groupmod -g 1000 robert
			chown -R robert:robert /home/robert/
			# move mbl data files to /home/robert
			# they only exist if system is live
			# and mountblv has been installed
			if test -f /root/.mbl.rc; then
				mv -fv .mbl.rc /home/robert
				chown robert:robert /home/robert/.mbl.rc
			fi

			if test -f /root/.mbldata.rc; then
				mv -fv .mbldata.rc /home/robert
				chown robert:robert /home/robert/.mbldata.rc
			fi

		else
			# disable editfstab.service for desktop
			systemctl is-enabled editfstab > /dev/null 2>&1
			test $? -eq 0 && systemctl disable editfstab

			# export custom.cfg from subversion
			svn export --force file:///mnt/svn/root/my-linux/grub/custom.cfg /boot/grub/

			# edit grub default to enable os prober
			sed -i -e 's/^GRUB_TIMEOUT_STYLE/#GRUB_TIMEOUT_STYLE/' /etc/default/grub
			sed -i -e 's/^GRUB_TIMEOUT.*/GRUB_TIMEOUT=10/' /etc/default/grub
			sed -i -e '/GRUB_DISABLE_OS_PROBER/d' /etc/default/grub
			sed -i -e '$a\GRUB_DISABLE_OS_PROBER="false"' /etc/default/grub
			sed -i -e 's/^GRUB_DEFAULT=.*/GRUB_DEFAULT=\"saved\"/' /etc/default/grub

			# set grub to boot last boot on menu
			sed -i -e '/^GRUB_SAVEDEFAULT=/d' /etc/default/grub
			sed -i -e '$a\GRUB_SAVEDEFAULT="true"' /etc/default/grub

			# edit grub default to remove splash and create a block cursor for console
			sed -i -e 's/GRUB_CMDLINE_LINUX_DEFAULT=.*/GRUB_CMDLINE_LINUX_DEFAULT=\"vt.cur_default=8\"/' /etc/default/grub
			update-grub
		fi
	fi
}

#########################################################
# function to setup subversion link to the new path
# the new user must already exist
# the owner.group of the /mnt directory must
# be set to new user
# check the repository exists and then check/set the link
# to point to it.
# parameters: setupreppository
# 		$1 newuser  (non root)
#		$2 svnpath | debhomepath 
#		$3 link  (/mnt/svn/ | /mnt/debhome)
#########################################################
setuprepository() {
	# check new user exists
	getent passwd $1 > /dev/null 2>&1
	exitonerror $? "new user $1 does not exist"

	# check that repository can be found
	# at the path
	if test -d "$2"; then
		# path exists now check the link
		if test -L "$3"; then
			# the link exists
			# check where it points to
			LINKPATH=`ls -l $3 | cut -d " " -f11`
			echo "link path = $3 new path = $2"

			# now check if link points to svn | debhome path
			if test "${LINKPATH}" != "$2"; then
				# link must be changed
				rm -rvf "$3"
				exitonerror $? "could not remove link $3"
				# make the new link
				sudo -u $1 ln -s "$2" "$3"
				exitonerror $? "could not make the link $3"
			fi

		else
			# there is no link
			# make the link
			sudo -u $1 ln -s "$2" "$3"
			exitonerror $? "could not make the link $3"
		fi
		# subversion | debhome exists and link is correct
		log "repository exists $3 -> $2"

	else
		# subversion | debhome repository not found
		exitonerror 1 "repository not found at $2"
	fi
}

########################################################
# debhome
# subversion must already be installed
# svn must already be accesible
# the new user must already exist
# check the existence of the link and debhome repository
# setup the link for debhome
# export the pubkey to /etc/apt/keyrings/debhomepubkey.asc
# export debhome.sources to /etc/apt/sources.list.d
# paramters: newuser DEBHOMEPATH
# repository at /mnt/debhome -> /mnt/DEBHOMEPATH/debhome
#######################################################
debhome() {
	# check new user exists
	getent passwd $1 > /dev/null 2>&1
	exitonerror $? "new user $1 does not exist"

	# if the link exists and points to debhome do nothing
	if test -L "${DEBHOMELINK}"; then
		# link exists
		# check it points to debhome
		if test -d "${DEBHOMELINK}"; then
			log "${DEBHOMELINK} -> $2 and debhome respository exists";
		else
			# debhome directory does not exist
			# the link might be stale
			rm -vf "${DEBHOMELINK}"
			exitonerror $? "could not remove ${DEBHOMELINK}"

			# make a link to the existing device
			sudo -u $1 ln -s "/mnt/$2/debhome" "${DEBHOMELINK}"
			exitonerror $? "could not make link ${DEBHOMELINK} -> /mnt/$2/debhome"

			# now check if the debhome repository is accessible
			test -d "${DEBHOMELINK}"
			exitonerror $? "debhome respository not found at /mnt/$2/debhome";
		fi
	else
		# the link does not exist
		# make it
		sudo -u $1 ln -s "/mnt/$2/debhome" "${DEBHOMELINK}"
		exitonerror $? "could not make the link ${DEBHOMELINK} -> /mnt/$2/debhome";

		# check it points to debhome respository
		test -d "${DEBHOMELINK}"
		exitonerror $? "debhome repository not found at /mnt/$2/debhome";
	fi

	# write debhome.sources to /etc/apt/sources.list.d/debhome.sources
	# get the public key for debhome
	# mkdir /etc/apt/keyrings if it does not exist
	test -d /etc/apt/keyrings || mkdir /etc/apt/keyrings
	# export the public key
	test ! -f "/etc/apt/keyrings/debhomepubkey.asc" || svn export --force ${SVNURL}/root/my-linux/sources/gpg/debhomepubkey.asc /etc/apt/keyrings/
	exitonerror $? "could not export debhomepubkey.asc from subverison"

	if test "${ARCH}" = "aarch64" && test ! -f "/etc/apt/sources.list.d/debhome.sources"; then
		# export debhome.source for arm64
		svn export --force ${SVNURL}/root/my-linux/sources/arm64/debhome.sources /etc/apt/sources.list.d/
		exitonerror $? "could not export debhome.sources from subversion"

		# set permissions to 0644
		chmod 0644 /etc/apt/sources.list.d/debhome.sources

		# set permisions of directory
		chmod 0755 /etc/apt/sources.list.d

	elif test "${ARCH}" = "x86_64" && test ! -f "/etc/apt/sources.list.d/debhome.sources"; then
		# export debhome.source for amd64
		svn export --force ${SVNURL}/root/my-linux/sources/amd64/debhome.sources /etc/apt/sources.list.d/
		exitonerror $? "could not export debhome.sources from subversion"
		# set permissions to 0644
		chmod 0644 /etc/apt/sources.list.d/debhome.sources

		# set permisions of directory
		chmod 0755 /etc/apt/sources.list.d
	else
		# unknown architecture
		exitonerror 1 "unknown architecture"
	fi
	log "setup debhome"
}

###########################################
# make all the mount directories
# the new user must already exist
# set ownership to newuser of new directories and /mnt
# parameters: makedirs ${NEWUSER}
###########################################
makedirs() {
	chown $1:$1 /mnt

	# make all /mnt directories
	/usr/local/bin/editfstab -d

	# change ownership of links
	chown --no-dereference $1:$1 /mnt/*
	log "made directories"
}

##############################################
# setupsevice is only used if initial user is pi
# the service is enabled so the user is changed
# from pi to robert after reboot.
# this script is called with -c option for change user
# and then exits after setting diretory and link permissions
##############################################
setupservice() {
	# setup init-rpi.service to launch init-rpi on reboot
	# network must be up and running
	echo "[Unit]
	Description=init-rpi.service reboot raspberry pi and change user from pi to robert
	BindsTo=multi-user.target
	After=multi-user.target

	[Service]
	Type=simple
	ExecStart=/bin/bash /usr/local/bin/init-linux -c

	[Install]
	WantedBy=multi-user.target" > /etc/systemd/system/init-rpi.service

	# set mode for init-rpi.service
	chmod 0644 /etc/systemd/system/init-rpi.service

	# enable the service for the next boot
	systemctl enable init-rpi
}
#############################################
# setup colors for accounts and nano
# parameters: accountcolours current user
# svn must be set up
#############################################
accountcolours() {


	#############################
	# setup /root account for rpi
	#############################
	# root .bashrc edit so directories will be in colour for root and red prompt
	if test ! -f /root/.bashrc.bak; then
		cp -f /root/.bashrc /root/.bashrc.bak
	fi

	# for ubuntu, it is commented out
	sed -i -e 's/^#force_color_prompt=yes/force_color_prompt=yes/' /root/.bashrc

	# prompt for ubuntu and rpi
	if test "${ARCH}" = "x86_64"; then

		# make the prompt
		sed -i -e 's/PS1=.*033\[00m\\\].*/PS1='\''\${debian_chroot:+(\$debian_chroot)}\\[\\033[01;31m\\]\\u@\\h\\[\\033[00m\\]:\\[\\033[01;36m\\]\\w \#\\[\\033[00m\\] '\'''/ /root/.bashrc
	elif test "${ARCH}" = "aarch64"; then

		# make the prompt
		sed -i -e 's/^# PS1=.*/PS1='\''\${debian_chroot:+(\$debian_chroot)}\\[\\033[01;31m\\]\\u@\\h\\[\\033[00m\\]:\\[\\033[01;36m\\]\\w \#\\[\\033[00m\\] '\'''/ /root/.bashrc
	fi

	# setup the aliases for colour
	sed -i -e 's/^# alias l/alias l/' /root/.bashrc

	# setup to use .dircolors
	sed -i -e 's/^# export LS/export LS/' /root/.bashrc
	sed -i -e 's/^# eval.*dircolors.*/eval \"\$(dircolors -b ~\/.dircolors)\"/' /root/.bashrc

	# set up dircolors for root
	dircolors --print-database > /root/.dircolors
	sed -i -e 's/^DIR 01;34/DIR 01;36/' /root/.dircolors
	sed -i -e 's/^LINK 01;36/LINK 01;33/' /root/.dircolors

	#########################
	# setup  non root account for current user
	#########################

	# copy .dircolors to /home/robert and set ownership
	cp /root/.dircolors "/home/$1/"
	chown $1:$1 /home/$1/.dircolors

	# edit .bashrc for pi so directories will be in colour
	if test ! -f /home/$1/.bashrc.bak; then
		sudo -u $1 cp /home/$1/.bashrc /home/$1/.bashrc.bak
	fi
	# change colour of prompt
	sudo -u $1 sed -i -e 's/#force_color_prompt/force_color_prompt/' /home/$1/.bashrc
	sudo -u $1 sed -i -e 's/\[\\033\[01;34m\\\]/\[\\033\[01;36m\\\]/' /home/$1/.bashrc

	# install git credentials
	sudo -u $1 svn export --force ${SVNURL}/root/my-linux/git/.gitconfig /home/$1/
	exitonerror $? "could not export .gitconfig"

	sudo -u $1 svn export --force ${SVNURL}/root/my-linux/git/.git-credentials /home/$1/
	exitonerror $? "could not export .git-credentials"

	# install rclone.conf
	test -d /home/$1/.config || mkdir /home/$1/.config
	sudo -u $1 svn export --force ${SVNURL}/root/my-linux/rclone /home/$1/.config/rclone

	# export .bash_aliases from subversion
	sudo -u $1 svn export --force ${SVNURL}/root/my-linux/config-files/bash_aliases/.bash_aliases /home/$1
	exitonerror $? "could not export .bash_aliases"

	# edit subversion config so .git and .gitignore are ignored
	sed -i -e 's/^# global-ignores =/global-ignores = .git .gitignore/' /etc/subversion/config

	# edit nanorc
	sed -i -e 's/^# set autoindent/set autoindent/' \
	       -e 's/^# set linenumbers/set linenumbers/' \
	       -e 's/^# set smooth/set smooth/' \
	       -e 's/^# set multibuffer/set multibuffer/' \
	       -e 's/^# set positionlog/set positionlog/' \
	       -e 's/^# set selectedcolor lightwhite,magenta/set selectedcolor lightwhite,magenta/' \
	       -e 's/^# set numbercolor cyan/set numbercolor cyan/' \
	       -e 's/^# set keycolor cyan/set keycolor cyan/' /etc/nanorc
	log "setup account colours"
}
################################################
# disable the init-rpi.service if it is enabled
# invoked by changeuser
################################################
disableinitrpi() {
	if test -f /etc/systemd/system/init-rpi.service; then
		systemctl is-enabled init-rpi.service
		if test $? -eq 0; then
			# disable the init-rpi.service
			systemctl disable init-rpi.service
			log "disabled init-rpi.service"
		fi
	fi
}

###########################################
# invoked by changeuser function.
# set ownership of /mnt/ dirs to robert.robert
# after pi changed to robert
# parameter passed is user robert
###########################################
setowner() {
	chown -R --no-dereference $1:$1 /mnt
	# change ownership of directories

	log "set ownership of directories"
}

##############################################################
# this function is only run after a reboot by systemd
# to make sure no pi processes are running.
# this function will exit if pi processes are running
# change user pi to robert with correct groups and permissions
# check if user robert exists
# parameters: changeuser OLDUSER NEWUSER
# ie changeuser pi robert
##############################################################
changeuser() {
	# disable init-rpi.service
	disableinitrpi

	# check if any process of pi is still running
	ps -U "$1" > /dev/null 2>&1
	exitonerror $? "a process from user $1 is still running"

	getent passwd $2 > /dev/null 2>&1
	if test $? -ne 0; then
		# user robert does not exist, create it
		# since svn might be copied to newuser home
		# the olduser dir must be copied to the newuser directory
		# usermod refuses to move if newuser home exists
		usermod -l $2 -m -d /home/$2 $1

		# if group pi exists, change it to group robert
		getent group $1
		if test $? -eq 0; then
			# change the group pi to robert
			groupmod -n $2 $1
		fi
		# set permissions of new user home
		# and of the mount directories and links
		chown $2:$2 -R /home/$2
		setowner "$2"

		log "$1 user changed to user $2"
	else
		log "user $2 already exists"
	fi

	# nothing more to be done.
	# this function was invoked after a reboot
	# initial user pi was changed to robert.
	# so exit
	log "success, exiting"
	exit 0
}

# defaults, links
# /mnt/debhome    -> DEBHOMEPATH
# /mnt/svn        -> SVNPATH
# the links cannot be changed, the mountpoints can be changed

# only for raspberry pi
DEBHOMEPATH="/mnt/ad64/debhome"
SVNPATH="/mnt/ad64/svn"
OLDUSER="pi"
LOGFILE="/tmp/init-linux.log"
# the current non root user, either robert or pi
CURUSER="none"
ARCH=`arch`

################################
# constants which never change
################################
DEBHOMELINK="/mnt/debhome"
SVNLINK="/mnt/svn"
SVNURL="file:///${SVNLINK}"
NEWUSER="robert"

################################
# main entry
################################
log "init-linux is running for ${ARCH}" "new"

# parameter S destinstion of svn is
# only used in init-rpi, not in this script
# it must be defined here as it is passed to init-rpi
# option c is only used automatically by this script
# if the initial user is pi
while getopts Rd:s:ch opt
do
	case ${opt} in
		d) DEBHOMEPATH="${OPTARG}";;
		s) SVNPATH="${OPTARG}";;
		R) REBOOT="true";;
		c) changeuser "${OLDUSER}" "${NEWUSER}";;
		h) usage;;
		\?) usage;;
	esac
done

#####################################
# init-linux must to be copied to /usr/local/bin
#####################################
# copy this script to /usr/local/bin
# incase init-rpi.service needs to run it
# only copy if not run from /usr/local/bin
if test ! -f "/usr/local/bin/init-linux"; then
	echo "$0 not found"
	cp -vf $0 /usr/local/bin/
	exitonerror $? "could not copy $0 to /usr/local/bin"
fi
####################################
# note: git, subversion, editfstab
# init-linux are all install in filesystem.squashfs
# by liveinstall.sh when makeing the image
####################################


#########################################
# determine if user robert or pi exists.
#########################################
getent passwd robert > /dev/null 2>&1
if test $? -eq 0; then
	# non root user = robert
	CURUSER="robert"
else
	# check for pi
	getent passwd pi > /dev/null 2>&1
	if test $? -eq 0; then
		# non root user = pi
		CURUSER="pi"

		# user can be changed only after reboot
		# setup service for reboot
		setupservice
	else
		# non root user is unknown
		exitonerror 1 "user robert or pi does not exist"
	fi
fi

########################################
# make directories and set ownership
########################################
makedirs "${CURUSER}"

#######################################
# setup svn and debhome and set links for desktop and rpi
#######################################
setuprepository "${CURUSER}" "${SVNPATH}" "${SVNLINK}"
exit 0;

setuprepository "${CURUSER}" "${DEBHOMEPATH}" "${DEBHOMELINK}"

# setup up account colours
# subversion repository must be accessible
accountcolours "${CURUSER}"

####################################
# setup linux sudoers, console, host
# config boot parameters, keyboard,
# autologin, multi-user
####################################
setuplinux

log "success"

############################################
# reboot only if option set and
# user is pi. init-rpi will change pi to robert
############################################
if test "${REBOOT}" = "true" && test "${CURUSER}" = "${OLDUSER}"; then
	shutdown -r now
elif test "${CURUSER}" = "${OLDUSER}"; then
	echo "reboot to change user"
fi
